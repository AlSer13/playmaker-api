openapi: 3.0.2
info:
  version: 1.0.0
  title: "Playmaker API"

servers:
- url: http://localhost:3000/api
  description: 'Локальный сервер'
- url: http://playmaker.gq/api
  description: 'Перспектива '

paths:
  /teams:
    get:
      tags:
        - TEAMS
      summary: "GET /teams"
      description: "Get team list"
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: "ok"
                  count:
                    type: integer
                    example: 1
                  teams:
                    type: array
                    items:
                      $ref: "#/components/schemas/Team"
                    minItems: 1
        500:
          $ref: "#/components/responses/Error"
    post:
      tags:
      - TEAMS
      summary: "POST /teams"
      description: "Add new team"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: String
                  required: true
                  example: "Natus Vincere"
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: String
                    example: ok
                  addedTeam:
                    type: object
                    $ref: "#/components/schemas/Team"
        500:
          $ref: "#/components/responses/Error"
    delete:
      tags:
      - TEAMS
      summary: "DELETE /teams"
      description: "Delete team"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                teamId:
                  type: ObjectId
                  example: "507f1f77bcf86cd799439018"
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: String
                    example: ok
        500:
          $ref: "#/components/responses/Error"
  /teams/{teamId}:
    get:
      tags:
      - TEAMS
      summary: "GET /teams/{teamId}"
      parameters:
      - in: path
        name: teamId
        required: true
        schema:
          type: ObjectId
      description: "Get team info"
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: "ok"
                  team:
                    $ref: "#/components/schemas/Team"
        500:
          $ref: "#/components/responses/Error"
  /teams/{teamId}/players:
    post:
      tags:
      - TEAMS
      summary: "POST /teams/{teamId}/players"
      parameters:
      - in: path
        name: teamId
        required: true
        schema:
          type: ObjectId
      description: "Add player to team"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                userId:
                  type: ObjectId
                  required: true
                  example: "507f1f77bcf86cd799439011"
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: "ok"
                  updatedTeam:
                    type: object
                    $ref: "#/components/schemas/Team"
        500:
          $ref: "#/components/responses/Error"
    delete:
      tags:
      - TEAMS
      summary: "DELETE /teams/{teamId}/players"
      parameters:
      - in: path
        name: teamId
        required: true
        schema:
          type: ObjectId
      description: "Delete player from team"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                userId:
                  type: ObjectId
                  required: true
                  example: "507f1f77bcf86cd799439011"
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: "ok"
                  removedPlayer:
                    type: ObjectId
                    example: "507f1f77bcf86cd799439011"
                  updatedTeam:
                    type: object
                    $ref: "#/components/schemas/Team"
        500:
          $ref: "#/components/responses/Error"
  /tournaments:
    get:
      tags:
      - TOURNAMENTS
      summary: "GET /tournaments"
      description: "Get tournament list"
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: "ok"
                  count:
                    type: integer
                    example: 1
                  tournaments:
                    type: array
                    items:
                      $ref: "#/components/schemas/TournamentMin"
                    minItems: 1
        500:
          $ref: "#/components/responses/Error"
    post:
      tags:
      - TOURNAMENTS
      summary: "POST /tournaments"
      description: "Add new tournament"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                team_count:
                  type: integer
                  required: true
                  example: 16
                prizePool:
                  type: integer
                  required: true
                  example: 300000
                name:
                  type: String
                  required: true
                  example: "ITMO Cup"
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: String
                    example: ok
                  addedTournament:
                    type: object
                    $ref: "#/components/schemas/Tournament"
        500:
          $ref: "#/components/responses/Error"
    delete:
      tags:
      - TOURNAMENTS
      summary: "DELETE /tournaments"
      description: "Delete tournament"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                tournamentId:
                  type: ObjectId
                  example: "507f1f77bcf86cd799439012"
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: String
                    example: ok
        500:
          $ref: "#/components/responses/Error"
  /tournaments/{tournamentId}:
    get:
      tags:
      - TOURNAMENTS
      summary: "GET /tournaments/{tournamentId}"
      description: "Get tournament info"
      parameters:
      - in: path
        name: tournamentId
        required: true
        schema:
          type: ObjectId
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: "ok"
                  tournament:
                      $ref: "#/components/schemas/Tournament"
        500:
          $ref: "#/components/responses/Error"
    patch:
      tags:
      - TOURNAMENTS
      summary: "PATCH /tournaments/{tournamentId}"
      description: "Update tournament info"
      parameters:
      - in: path
        name: tournamentId
        required: true
        schema:
          type: ObjectId
      requestBody:
        content:
          application/json:
            schema:
              properties:
                description:
                  type: string
                  example: "Турнир за автомат по пипу"
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: "ok"
                  updatedTournament:
                    $ref: "#/components/schemas/Tournament"
        500:
          $ref: "#/components/responses/Error"
  /tournaments/{tournamentId}/teams:
    post:
      tags:
      - TOURNAMENTS
      summary: "POST /tournaments/{tournamentId}/teams"
      parameters:
      - in: path
        name: tournamentId
        required: true
        schema:
          type: ObjectId
      description: "Add team to tournament"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                teamId:
                  type: ObjectId
                  required: true
                  example: "507f1f77bcf86cd799439011"
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: "ok"
                  updatedTournament:
                    type: object
                    $ref: "#/components/schemas/Tournament"
        500:
          $ref: "#/components/responses/Error"
    delete:
      tags:
      - TOURNAMENTS
      summary: "DELETE /tournaments/{tournamentId}/teams"
      parameters:
      - in: path
        name: tournamentId
        required: true
        schema:
          type: ObjectId
      description: "Delete team from tournament"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                teamId:
                  type: ObjectId
                  required: true
                  example: "507f1f77bcf86cd799439011"
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: "ok"
                  removedPlayer:
                    type: ObjectId
                    example: "507f1f77bcf86cd799439011"
                  updatedTeam:
                    type: object
                    $ref: "#/components/schemas/Tournament"
        500:
          $ref: "#/components/responses/Error"
  /tournaments/{tournamentId}/start:
    post:
      tags:
      - TOURNAMENTS
      summary: "POST /tournaments/{tournamentId}/start"
      parameters:
      - in: path
        name: tournamentId
        required: true
        schema:
          type: ObjectId
      description: "Start tournament"
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: "ok"
                  updatedTournament:
                    type: object
                    $ref: "#/components/schemas/Tournament"
        500:
          $ref: "#/components/responses/Error"
  /matches:
    get:
      tags:
      - MATCHES
      summary: "GET /matches"
      description: "Get team list"
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: string
                    example: "ok"
                  count:
                    type: integer
                    example: 1
                  teams:
                    type: array
                    items:
                      $ref: "#/components/schemas/Team"
                    minItems: 1
        500:
          $ref: "#/components/responses/Error"
    post:
      tags:
      - MATCHES
      summary: "POST /matches"
      description: "Add new match"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                matchId:
                  type: integer
                  required: true
                  example: 156594851
      responses:
        200:
          content:
            application/json:
              schema:
                properties:
                  status:
                    type: String
                    example: ok
                  addedTeam:
                    type: object
                    $ref: "#/components/schemas/Match"
        500:
          $ref: "#/components/responses/Error"
  /matches/{matchId}:
    get:
      tags:
      - MATCHES
      summary: "GET /matches/{matchId}"
      description: "Get match info"
      parameters:
      - in: path
        name: matchId
        required: true
        schema:
          type: integer
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Match"




components:
  responses:
    Error:
      content:
        application/json:
          schema:
            properties:
              status:
                type: String
                example: "error"
              error:
                type: object
  schemas:
    Team:
      type: object
      properties:
        _id:
          type: ObjectId
          example: "507f1f77bcf86cd799439010"
        name:
          type: String
          example: "Natus Vincere"
        teamOwner:
          type: ObjectId
          example: "507f1f77bcf86cd799439013"
        players:
          type: array
          items:
            $ref: "#/components/schemas/Player"
          minItems: 2
    Player:
      type: object
      properties:
        _id:
          type: ObjectId
          example: "507f1f77bcf86cd799439011"
        username:
          type: string
          example: "Bleizard"
    Tournament:
      type: object
      properties:
        _id:
          type: ObjectId
          example: "507f1f77bcf86cd799439017"
        owner:
          type: ObjectId
          example: "507f1f77bcf86cd799439011"
        description:
          type: string
          example: "The best tournament in the world"
        name:
          type: string
          example: "ITMO Cup"
        teamCount:
          type: integer
          example: 16
        prizePool:
          type: integer
          example: 300000
        finished:
          type: boolean
          example: false
        started:
          type: boolean
          example: false
        winnerTeam:
          type: ObjectId
          example: null
        teams:
          type: array
          items:
            $ref: "#/components/schemas/Team"
        bracket:
          type: array
          items:
            type: object
            properties:
              _id:
                type: integer
                example: 13326458
              team1:
                type: ObjectId
                example: "507f1f77bcf86cd799439125"
              team2:
                type: ObjectId
                example: "507f1f77bcf86cd799439180"
              stage:
                type: integer
                example: 8
              parantMatch:
                type: integer
                example: 154649485
    TournamentMin:
      type: object
      properties:
        _id:
          type: ObjectId
          example: "507f1f77bcf86cd799439017"
        description:
          type: string
          example: "The best tournament in the world"
        name:
          type: string
          example: "ITMO Cup"
        teamCount:
          type: integer
          example: 16
        prizePool:
          type: integer
          example: 300000
        finished:
          type: boolean
          example: false
        started:
          type: boolean
          example: false
        winnerTeam:
          type: ObjectId
          example: null
    MatchMin:
      type: object
      properties:
        _id:
          type: integer
          example: 156948485
        players:
          type: array
          items:
            type: object
            properties:
              account_id:
                type: integer
                example: 4294967295
              player_slot:
                type: integer
                example: 0
              hero_id:
                type: integer
                example: 81
        start_time:
          type: integer
          example: 1538333967
          description: "Unix timestamp"
    Match:
      type: object
      properties:
        _id:
          type: integer
          example: 151659555
        duration:
          type: integer
          example: 3000
        start_time:
          type: integer
          example: 15695948
          description: "Unix timestamp"
        tower_status_radiant:
          type: integer
          example: 0
          description: "https://wiki.teamfortress.com/wiki/WebAPI/GetMatchDetails#Tower_Status"
        tower_status_dire:
          type: integer
          example: 0
          description: "https://wiki.teamfortress.com/wiki/WebAPI/GetMatchDetails#Tower_Status"
        barracks_status_radiant:
          type: integer
          example: 0
          description: "See https://wiki.teamfortress.com/wiki/WebAPI/GetMatchDetails#Barracks_Status"
        barracks_status_dire:
          type: integer
          example: 0
          description: "See https://wiki.teamfortress.com/wiki/WebAPI/GetMatchDetails#Barracks_Status"
        radiant_score:
          type: integer
          example: 30
        dire_score:
          type: integer
          example: 27
        players:
          type: array
          items:
            type: object
            properties:
              account_id:
                type: integer
                example: 454545
              player_slot:
                type: integer
                example: 0
              hero_id:
                type: integer
                example: 78
              item_0:
                type: integer
                example: 7
              item_1:
                type: integer
                example: 7
              item_2:
                type: integer
                example: 7
              item_3:
                type: integer
                example: 7
              item_4:
                type: integer
                example: 7
              item_5:
                type: integer
                example: 7
              backpack_0:
                type: integer
                example: 7
              backpack_1:
                type: integer
                example: 7
              backpack_2:
                type: integer
                example: 7
              kills:
                type: integer
                example: 11
              deaths:
                type: integer
                example: 5
              assists:
                type: integer
                example: 7
              last_hits:
                type: integer
                example: 257
              denies:
                type: integer
                example: 7
              gold_per_min:
                type: integer
                example: 478
              xp_per_min:
                type: integer
                example: 785
              level:
                type: integer
                example: 25
              hero_damage:
                type: integer
                example: 12659
              tower_damage:
                type: integer
                example: 13485
              hero_healing:
                type: integer
                example: 0
              gold:
                type: integer
                example: 19845
              gold_spent:
                type: integer
                example: 17856
              abitily_upgrades:
                type: array
                items:
                  type: object
                  properties:
                    ability:
                      type: integer
                      example: 15
                    time:
                      type: integer
                      example: 0
                    level:
                      type: integer
                      example: 1
  
